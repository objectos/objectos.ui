"use strict";(self.webpackChunk_carbon_react=self.webpackChunk_carbon_react||[]).push([[3461],{"./src/components/ListBox/ListBoxPropTypes.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{C:()=>ListBoxSizePropType,d:()=>ListBoxTypePropType});var prop_types__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("../../node_modules/prop-types/index.js"),prop_types__WEBPACK_IMPORTED_MODULE_0___default=__webpack_require__.n(prop_types__WEBPACK_IMPORTED_MODULE_0__);const ListBoxTypePropType=prop_types__WEBPACK_IMPORTED_MODULE_0___default().oneOf(["default","inline"]),ListBoxSizePropType=prop_types__WEBPACK_IMPORTED_MODULE_0___default().oneOf(["sm","md","lg"])},"./src/components/ListBox/index.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{Ay:()=>components_ListBox});var classnames=__webpack_require__("../../node_modules/classnames/index.js"),classnames_default=__webpack_require__.n(classnames),react=__webpack_require__("../../node_modules/react/index.js"),prop_types=__webpack_require__("../../node_modules/prop-types/index.js"),prop_types_default=__webpack_require__.n(prop_types),deprecate=__webpack_require__("./src/prop-types/deprecate.ts"),ListBoxPropTypes=__webpack_require__("./src/components/ListBox/ListBoxPropTypes.ts"),usePrefix=__webpack_require__("./src/internal/usePrefix.ts"),FormContext=__webpack_require__("./src/components/FluidForm/FormContext.ts");function _extends(){return _extends=Object.assign?Object.assign.bind():function(n){for(var e=1;e<arguments.length;e++){var t=arguments[e];for(var r in t)({}).hasOwnProperty.call(t,r)&&(n[r]=t[r])}return n},_extends.apply(null,arguments)}const handleOnKeyDown=event=>{27===event.keyCode&&event.stopPropagation()},handleClick=event=>{event.preventDefault(),event.stopPropagation()},ListBox=(0,react.forwardRef)(((props,ref)=>{const{children,className:containerClassName,disabled=!1,type="default",size,invalid,invalidText,invalidTextId,warn,warnText,warnTextId,light,isOpen,...rest}=props,prefix=(0,usePrefix.M)(),{isFluid}=(0,react.useContext)(FormContext.c),showWarning=!invalid&&warn,className=classnames_default()({...containerClassName&&{[containerClassName]:!0},[`${prefix}--list-box`]:!0,[`${prefix}--list-box--${size}`]:size,[`${prefix}--list-box--inline`]:"inline"===type,[`${prefix}--list-box--disabled`]:disabled,[`${prefix}--list-box--light`]:light,[`${prefix}--list-box--expanded`]:isOpen,[`${prefix}--list-box--invalid`]:invalid,[`${prefix}--list-box--warning`]:showWarning});return react.createElement(react.Fragment,null,react.createElement("div",_extends({},rest,{className,ref,onKeyDown:handleOnKeyDown,onClick:handleClick,"data-invalid":invalid||void 0}),children),isFluid&&react.createElement("hr",{className:`${prefix}--list-box__divider`}),invalid?react.createElement("div",{className:`${prefix}--form-requirement`,id:invalidTextId},invalidText):null,showWarning?react.createElement("div",{className:`${prefix}--form-requirement`,id:warnTextId},warnText):null)}));ListBox.displayName="ListBox",ListBox.propTypes={children:prop_types_default().node,className:prop_types_default().string,disabled:prop_types_default().bool,invalid:prop_types_default().bool,invalidText:prop_types_default().node,invalidTextId:prop_types_default().string,isOpen:prop_types_default().bool,light:(0,deprecate.C)(prop_types_default().bool,"The `light` prop for `ListBox` has been deprecated in favor of the new `Layer` component. It will be removed in the next major release."),size:ListBoxPropTypes.C,type:ListBoxPropTypes.d,warn:prop_types_default().bool,warnText:prop_types_default().string,warnTextId:prop_types_default().string};const ListBox_ListBox=ListBox;function ListBoxField_extends(){return ListBoxField_extends=Object.assign?Object.assign.bind():function(n){for(var e=1;e<arguments.length;e++){var t=arguments[e];for(var r in t)({}).hasOwnProperty.call(t,r)&&(n[r]=t[r])}return n},ListBoxField_extends.apply(null,arguments)}function ListBoxField({children,disabled,tabIndex,...rest}){const prefix=(0,usePrefix.M)();return react.createElement("div",ListBoxField_extends({className:`${prefix}--list-box__field`,tabIndex:!disabled&&tabIndex||-1},rest),children)}ListBox.__docgenInfo={description:"`ListBox` is a generic container component that handles creating the\ncontainer class name in response to certain props.",methods:[],displayName:"ListBox",props:{disabled:{required:!1,tsType:{name:"boolean"},description:"Specify whether the ListBox is currently disabled",type:{name:"bool"}},invalid:{required:!1,tsType:{name:"boolean"},description:"Specify whether the control is currently invalid",type:{name:"bool"}},invalidText:{required:!1,tsType:{name:"ReactReactNode",raw:"React.ReactNode"},description:"Specify the text to be displayed when the control is invalid",type:{name:"node"}},invalidTextId:{required:!1,tsType:{name:"string"},description:"Specify the id to be applied to the element containing the invalid text",type:{name:"string"}},isOpen:{required:!1,tsType:{name:"boolean"},description:"Specify if the control should render open",type:{name:"bool"}},light:{required:!1,tsType:{name:"boolean"},description:"`true` to use the light version. For use on $ui-01 backgrounds only.\nDon't use this to make tile background color same as container background color.\n\n@deprecated The `light` prop for `ListBox` has been deprecated in favor of\nthe new `Layer` component. It will be removed in the next major release.",type:{name:"custom",raw:"deprecate(\n  PropTypes.bool,\n  'The `light` prop for `ListBox` has ' +\n    'been deprecated in favor of the new `Layer` component. It will be removed in the next major release.'\n)"}},size:{required:!1,tsType:{name:"unknown[number]",raw:"(typeof listBoxSizes)[number]"},description:"Specify the size of the ListBox. Currently supports either `sm`, `md` or `lg` as an option.",type:{name:"enum",value:[{value:"'sm'",computed:!1},{value:"'md'",computed:!1},{value:"'lg'",computed:!1}]}},type:{required:!1,tsType:{name:"unknown[number]",raw:"(typeof listBoxTypes)[number]"},description:'Specify the "type" of the ListBox. Currently supports either `default` or\n`inline` as an option.',type:{name:"enum",value:[{value:"'default'",computed:!1},{value:"'inline'",computed:!1}]}},warn:{required:!1,tsType:{name:"boolean"},description:"Specify whether the control is currently in warning state",type:{name:"bool"}},warnText:{required:!1,tsType:{name:"ReactReactNode",raw:"React.ReactNode"},description:"Provide the text that is displayed when the control is in warning state",type:{name:"string"}},warnTextId:{required:!1,tsType:{name:"string"},description:"Specify the id to be applied to the element containing the warn text",type:{name:"string"}},children:{description:"Provide the contents of your ListBox",type:{name:"node"},required:!1},className:{description:"Specify a class name to be applied on the containing list box node",type:{name:"string"},required:!1}},composes:["Omit"]},ListBoxField.propTypes={"aria-haspopup":prop_types_default().oneOfType([prop_types_default().string,prop_types_default().bool]),children:prop_types_default().node,disabled:prop_types_default().bool,role:prop_types_default().string,tabIndex:prop_types_default().oneOfType([prop_types_default().number,prop_types_default().string])};const ListBox_ListBoxField=ListBoxField;ListBoxField.__docgenInfo={description:"`ListBoxField` is responsible for creating the containing node for valid\nelements inside of a field. It also provides a11y-related attributes like\n`role` to make sure a user can focus the given field.",methods:[],displayName:"ListBoxField",props:{disabled:{required:!1,tsType:{name:"boolean"},description:"Specify if the parent <ListBox> is disabled",type:{name:"bool"}},"aria-haspopup":{description:"Typically set by `getToggleButtonProps`, this should specify whether the\nfield has a popup.",type:{name:"union",value:[{name:"string"},{name:"bool"}]},required:!1},children:{description:"Provide the contents of your ListBoxField",type:{name:"node"},required:!1},role:{description:"The role for the component, should be set by `getToggleButtonProps` coming\nfrom Downshift",type:{name:"string"},required:!1},tabIndex:{description:"Optional prop to specify the tabIndex of the <ListBox> trigger button",type:{name:"union",value:[{name:"number"},{name:"string"}]},required:!1}},composes:["HTMLAttributes"]};var useMergedRefs=__webpack_require__("./src/internal/useMergedRefs.ts");function ListBoxMenuItem_extends(){return ListBoxMenuItem_extends=Object.assign?Object.assign.bind():function(n){for(var e=1;e<arguments.length;e++){var t=arguments[e];for(var r in t)({}).hasOwnProperty.call(t,r)&&(n[r]=t[r])}return n},ListBoxMenuItem_extends.apply(null,arguments)}const ListBoxMenuItem=(0,react.forwardRef)((({children,isActive=!1,isHighlighted=!1,title,...rest},forwardedRef)=>{const prefix=(0,usePrefix.M)(),menuItemOptionRefProp=forwardedRef&&"function"!=typeof forwardedRef?forwardedRef.menuItemOptionRef:void 0,{isTruncated,ref:menuItemOptionRef}=((forwardedRef,deps=[])=>{const localRef=(0,react.useRef)(null),mergedRef=(0,useMergedRefs.a)([...forwardedRef?[forwardedRef]:[],localRef]),[isTruncated,setIsTruncated]=(0,react.useState)(!1);return(0,react.useEffect)((()=>{const element=localRef.current;if(element){const{offsetWidth,scrollWidth}=element;setIsTruncated(offsetWidth<scrollWidth)}}),[localRef,...deps]),{isTruncated,ref:mergedRef}})(menuItemOptionRefProp,[children]),className=classnames_default()(`${prefix}--list-box__menu-item`,{[`${prefix}--list-box__menu-item--active`]:isActive,[`${prefix}--list-box__menu-item--highlighted`]:isHighlighted});return react.createElement("li",ListBoxMenuItem_extends({},rest,{className,title:isTruncated?title:void 0}),react.createElement("div",{className:`${prefix}--list-box__menu-item__option`,ref:menuItemOptionRef},children))}));ListBoxMenuItem.displayName="ListBoxMenuItem",ListBoxMenuItem.propTypes={children:prop_types_default().node,disabled:prop_types_default().bool,isActive:prop_types_default().bool,isHighlighted:prop_types_default().bool,title:prop_types_default().string};const ListBox_ListBoxMenuItem=ListBoxMenuItem;function ListBoxMenu_extends(){return ListBoxMenu_extends=Object.assign?Object.assign.bind():function(n){for(var e=1;e<arguments.length;e++){var t=arguments[e];for(var r in t)({}).hasOwnProperty.call(t,r)&&(n[r]=t[r])}return n},ListBoxMenu_extends.apply(null,arguments)}ListBoxMenuItem.__docgenInfo={description:"`ListBoxMenuItem` is a helper component for managing the container class\nname, alongside any classes for any corresponding states, for a generic list\nbox menu item.",methods:[],displayName:"ListBoxMenuItem",props:{children:{required:!1,tsType:{name:"ReactNode"},description:"Specify any children nodes that should be rendered inside of the ListBox\nMenu Item",type:{name:"node"}},isActive:{required:!1,tsType:{name:"boolean"},description:'Specify whether the current menu item is "active".',defaultValue:{value:"false",computed:!1},type:{name:"bool"}},isHighlighted:{required:!1,tsType:{name:"boolean"},description:'Specify whether the current menu item is "highlighted".',defaultValue:{value:"false",computed:!1},type:{name:"bool"}},disabled:{required:!1,tsType:{name:"boolean"},description:"Specify whether the item should be disabled",type:{name:"bool"}},title:{required:!1,tsType:{name:"string"},description:"Provide an optional tooltip for the ListBoxMenuItem",type:{name:"string"}}},composes:["HTMLAttributes"]};const ListBoxMenu=(0,react.forwardRef)((({children,id,...rest},ref)=>{const prefix=(0,usePrefix.M)();return react.createElement("ul",ListBoxMenu_extends({ref,id,className:`${prefix}--list-box__menu`,role:"listbox"},rest),children)}));ListBoxMenu.displayName="ListBoxMenu",ListBoxMenu.propTypes={children:prop_types_default().oneOfType([prop_types_default().node,prop_types_default().arrayOf(prop_types_default().oneOf([ListBox_ListBoxMenuItem])),prop_types_default().shape({type:prop_types_default().oneOf([ListBox_ListBoxMenuItem])}),prop_types_default().bool]),id:prop_types_default().string.isRequired};const ListBox_ListBoxMenu=ListBoxMenu;ListBoxMenu.__docgenInfo={description:"`ListBoxMenu` is a simple container node that isolates the `list-box__menu`\nclass into a single component. It is also being used to validate given\n`children` components.",methods:[],displayName:"ListBoxMenu",props:{children:{description:"Provide the contents of your ListBoxMenu",type:{name:"union",value:[{name:"node"},{name:"arrayOf",value:{name:"enum",value:[{value:"forwardRef<HTMLLIElement, ListBoxMenuItemProps>(\n  (\n    { children, isActive = false, isHighlighted = false, title, ...rest },\n    forwardedRef\n  ) => {\n    const prefix = usePrefix();\n\n    const menuItemOptionRefProp =\n      forwardedRef && typeof forwardedRef !== 'function'\n        ? (\n            forwardedRef as MutableRefObject<HTMLLIElement | null> & {\n              menuItemOptionRef?: Ref<HTMLDivElement>;\n            }\n          ).menuItemOptionRef\n        : undefined;\n\n    const { isTruncated, ref: menuItemOptionRef } = useIsTruncated(\n      menuItemOptionRefProp,\n      [children]\n    );\n    const className = cx(`${prefix}--list-box__menu-item`, {\n      [`${prefix}--list-box__menu-item--active`]: isActive,\n      [`${prefix}--list-box__menu-item--highlighted`]: isHighlighted,\n    });\n\n    return (\n      <li\n        {...rest}\n        className={className}\n        title={isTruncated ? title : undefined}>\n        <div\n          className={`${prefix}--list-box__menu-item__option`}\n          ref={menuItemOptionRef}>\n          {children}\n        </div>\n      </li>\n    );\n  }\n)",computed:!0}]}},{name:"shape",value:{type:{name:"enum",value:[{value:"forwardRef<HTMLLIElement, ListBoxMenuItemProps>(\n  (\n    { children, isActive = false, isHighlighted = false, title, ...rest },\n    forwardedRef\n  ) => {\n    const prefix = usePrefix();\n\n    const menuItemOptionRefProp =\n      forwardedRef && typeof forwardedRef !== 'function'\n        ? (\n            forwardedRef as MutableRefObject<HTMLLIElement | null> & {\n              menuItemOptionRef?: Ref<HTMLDivElement>;\n            }\n          ).menuItemOptionRef\n        : undefined;\n\n    const { isTruncated, ref: menuItemOptionRef } = useIsTruncated(\n      menuItemOptionRefProp,\n      [children]\n    );\n    const className = cx(`${prefix}--list-box__menu-item`, {\n      [`${prefix}--list-box__menu-item--active`]: isActive,\n      [`${prefix}--list-box__menu-item--highlighted`]: isHighlighted,\n    });\n\n    return (\n      <li\n        {...rest}\n        className={className}\n        title={isTruncated ? title : undefined}>\n        <div\n          className={`${prefix}--list-box__menu-item__option`}\n          ref={menuItemOptionRef}>\n          {children}\n        </div>\n      </li>\n    );\n  }\n)",computed:!0}],required:!1}},description:"allow single item using the workaround for functional components\nhttps://github.com/facebook/react/issues/2979#issuecomment-222379916"},{name:"bool"}]},required:!1},id:{description:"Specify a custom `id`",type:{name:"string"},required:!0}}};var bucket_3=__webpack_require__("../icons-react/es/generated/bucket-3.js");const defaultTranslations={"close.menu":"Close menu","open.menu":"Open menu"},defaultTranslateWithId=id=>defaultTranslations[id],ListBoxMenuIcon=({isOpen,translateWithId:t=defaultTranslateWithId})=>{const prefix=(0,usePrefix.M)(),className=classnames_default()(`${prefix}--list-box__menu-icon`,{[`${prefix}--list-box__menu-icon--open`]:isOpen}),description=t(isOpen?"close.menu":"open.menu");return react.createElement("div",{className},react.createElement(bucket_3.yQ,{name:"chevron--down","aria-label":description},react.createElement("title",null,description)))};ListBoxMenuIcon.propTypes={isOpen:prop_types_default().bool.isRequired,translateWithId:prop_types_default().func};const ListBox_ListBoxMenuIcon=ListBoxMenuIcon;var _Close,_Close2;ListBoxMenuIcon.__docgenInfo={description:"`ListBoxMenuIcon` is used to orient the icon up or down depending on the\nstate of the menu for a given `ListBox`",methods:[],displayName:"ListBoxMenuIcon",props:{isOpen:{required:!0,tsType:{name:"boolean"},description:"Specify whether the menu is currently open, which will influence the\ndirection of the menu icon",type:{name:"bool"}},translateWithId:{defaultValue:{value:"(id: ListBoxMenuIconTranslationKey): string =>\ndefaultTranslations[id]",computed:!1},description:"i18n hook used to provide the appropriate description for the given menu\nicon. This function takes a ListBoxMenuIconTranslationKey and should\nreturn a string message for that given message id.",type:{name:"func"},required:!1}}};const ListBoxSelection_translationIds_clear_all="clear.all",ListBoxSelection_translationIds_clear_selection="clear.selection",ListBoxSelection_defaultTranslations={[ListBoxSelection_translationIds_clear_all]:"Clear all selected items",[ListBoxSelection_translationIds_clear_selection]:"Clear selected item"},ListBoxSelection_defaultTranslateWithId=id=>ListBoxSelection_defaultTranslations[id],ListBoxSelection=({clearSelection,selectionCount,translateWithId:t=ListBoxSelection_defaultTranslateWithId,disabled,onClearSelection,readOnly})=>{const prefix=(0,usePrefix.M)(),className=classnames_default()(`${prefix}--list-box__selection`,{[`${prefix}--tag--filter`]:selectionCount,[`${prefix}--list-box__selection--multi`]:selectionCount}),handleOnClick=event=>{event.stopPropagation(),disabled||readOnly||(clearSelection(event),onClearSelection&&onClearSelection(event))},description=t(selectionCount?"clear.all":"clear.selection"),tagClasses=classnames_default()(`${prefix}--tag`,`${prefix}--tag--filter`,`${prefix}--tag--high-contrast`,{[`${prefix}--tag--disabled`]:disabled});return selectionCount?react.createElement("div",{className:tagClasses},react.createElement("span",{className:`${prefix}--tag__label`,title:`${selectionCount}`},selectionCount),react.createElement("div",{role:"button",tabIndex:-1,className:`${prefix}--tag__close-icon`,onClick:handleOnClick,"aria-label":t("clear.all"),title:description,"aria-disabled":!!readOnly||void 0},_Close||(_Close=react.createElement(bucket_3.bm,null)))):react.createElement("div",{role:"button",className,tabIndex:-1,onClick:handleOnClick,"aria-label":description,title:description},selectionCount,_Close2||(_Close2=react.createElement(bucket_3.bm,null)))};ListBoxSelection.propTypes={clearSelection:prop_types_default().func.isRequired,disabled:prop_types_default().bool,onClearSelection:prop_types_default().func,readOnly:prop_types_default().bool,selectionCount:prop_types_default().number,translateWithId:prop_types_default().func};const ListBox_ListBoxSelection=ListBoxSelection;ListBoxSelection.__docgenInfo={description:"`ListBoxSelection` is used to provide controls for clearing a selection, in\naddition to conditionally rendering a badge if the control has more than one\nselection.",methods:[],displayName:"ListBoxSelection",props:{disabled:{required:!1,tsType:{name:"boolean"},description:"Specify whether or not the clear selection element should be disabled",type:{name:"bool"}},readOnly:{required:!1,tsType:{name:"boolean"},description:"Whether or not the Dropdown is readonly",type:{name:"bool"}},selectionCount:{required:!1,tsType:{name:"number"},description:"Specify an optional `selectionCount` value that will be used to determine\nwhether the selection should display a badge or a single clear icon.",type:{name:"number"}},translateWithId:{defaultValue:{value:"(id: string) => defaultTranslations[id]",computed:!1},description:"i18n hook used to provide the appropriate description for the given menu\nicon. This function takes in an id defined in `translationIds` and should\nreturn a string message for that given message id.",type:{name:"func"},required:!1},clearSelection:{description:"Specify a function to be invoked when a user interacts with the clear\nselection element.",type:{name:"func"},required:!0},onClearSelection:{description:"Specify an optional `onClearSelection` handler that is called when the underlying\nelement is cleared",type:{name:"func"},required:!1}}};const components_ListBox=Object.assign(ListBox_ListBox,{Field:ListBox_ListBoxField,Menu:ListBox_ListBoxMenu,MenuIcon:ListBox_ListBoxMenuIcon,MenuItem:ListBox_ListBoxMenuItem,Selection:ListBox_ListBoxSelection})}}]);